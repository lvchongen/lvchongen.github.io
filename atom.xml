<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网络小虫成长记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lvchongen.github.io/"/>
  <updated>2019-03-29T05:23:52.860Z</updated>
  <id>https://lvchongen.github.io/</id>
  
  <author>
    <name>Chongen Lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vPC</title>
    <link href="https://lvchongen.github.io/2019/03/29/vPC/"/>
    <id>https://lvchongen.github.io/2019/03/29/vPC/</id>
    <published>2019-03-29T02:51:45.000Z</published>
    <updated>2019-03-29T05:23:52.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vPC"><a href="#vPC" class="headerlink" title="vPC"></a>vPC</h1><p>vPC(Virtural Port-Channel) 是Cisco Nexus系列交换机中的一个特性。它支持一个跨机箱的二层Port-Channel. 对于第三方设备来说(交换机或服务器) 物理上连接到了两台交换机，但逻辑上是一台交换机。</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/vPC_tuopu.png" alt="vPC_tuopu"></p><p>vPS的优势：</p><ul><li>消除STP阻塞端口.<ul><li>STP:  生成协议树， 逻辑上断开环路，防止二层网络的广播风暴产生。</li></ul></li><li>使用所有可用的链路带宽</li><li>允许服务器双主上连</li><li>当链路或设备失效后提供了快速的收敛</li><li>为服务器提供了双active的网关</li></ul><p>vPS术语：</p><ul><li>vPC Peer: 启用vPC的交换机被称为vPC的Peer。</li><li>vPC domain： 两台启用vPC的交换机所有的逻辑域。</li><li>vPC Peer Keepalive Link : Peer Keepalive link 是一个三层链路，用于在peer-link 失效后检测vPC Peer是否存活。</li><li>vPC Peer Link : 用于传输vPC控制层面的流量，包括同步mac地址表，vPC成员信息，IGMP信息。<ul><li>IGMP:  Internet组管理协议称为IGMP协议(Internet Group Management Protocol) ， 是因特网协议家族中的一个组播协议。该协议运行在主机和主播路由器之间。 </li></ul></li><li>Orphan Port: 孤立端口，没有加入vPC的端口</li><li>vPC Member Port: 加入vPC的端口，是一个Port-Channel接口。<ul><li>Port-Channel: port group 是配置层面上的一个物理端口组，配置到port group里面的物理端口才可以参加链路汇聚，并成为port channel里的某个成员端口。在逻辑上，port group 并不是一个端口，而是一个端口序列。加入port group 中的物理端口满足某种条件时进行端口汇聚，形成一个port channel，这个port channel 具备了逻辑端口的属性，才真正成为一个独立的逻辑端口。</li></ul></li></ul><p>vPC 防环：</p><p>vPC执行一个数据层面的防环来代替控制层面的STP。vPC peer-link被使用在两台vPC设备之间同步mac地址、vPC成员状态信息和IGMP。从vPC member port进来的流量，穿越vpc peer-link之后，不会再被允许从任何vPC Member port发出，但可以从其实接口（L3 Port或孤立端口转发）。vPC基于这样的机制来进行防环</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/vPC_Domain.png" alt="vPC_Domain"></p><p>vPC成员端口失效</p><p>如果一个vPC member port失效，和普通的Port-Channel机制一样，另一个端口会继续转发数据。</p><p>vPC Peer Link失效</p><p>当Peer link失效以后，vpc设备会通过peer keepalive link来检测Primary交换机是否存活，如果Secondary交换机能够继续收到Primary交换机发过来的信息，表示Primary交换机未宕机，则Secondary Peer会shutdown所有vpc member port，Primary交换机继续转发流量。</p><p>vPC Primary Switch 失效</p><p>如果Primary交换机无效，Secondary交换机会变成Primary, 继续转发流量。 vPC role不支持抢占，Priority越小越优先。</p><p>vPC Peer keepalive link和 Peer link同时失效</p><p>当Peer keepalive linke和Peer Link同时失效以后，Secondary交换机也会运行在Priamry模式下，两台交换机都会转发流量。</p><p>vPC Peer keepalive失效</p><p>只有Peer keepalive link失效并不会影响vpc的工作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vPC&quot;&gt;&lt;a href=&quot;#vPC&quot; class=&quot;headerlink&quot; title=&quot;vPC&quot;&gt;&lt;/a&gt;vPC&lt;/h1&gt;&lt;p&gt;vPC(Virtural Port-Channel) 是Cisco Nexus系列交换机中的一个特性。它支持一个跨机箱的二层Port
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nexus9K_SNMP</title>
    <link href="https://lvchongen.github.io/2019/03/25/Nexus9K-SNMP/"/>
    <id>https://lvchongen.github.io/2019/03/25/Nexus9K-SNMP/</id>
    <published>2019-03-25T06:56:05.000Z</published>
    <updated>2019-03-25T07:12:07.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nexus9K-commands-SNMP"><a href="#Nexus9K-commands-SNMP" class="headerlink" title="Nexus9K_commands_SNMP"></a><strong>Nexus9K_commands_SNMP</strong></h1><h3 id="SNMP-简单概述"><a href="#SNMP-简单概述" class="headerlink" title="SNMP 简单概述"></a>SNMP 简单概述</h3><p>SNMP是英文”Simple Network Management Protocol”的缩写，中文意思是”简单网络管理协议”。SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议。SNMP主要用于网络设备的管理，</p><p>SNMP协议主要由两大部分组成：SNMP管理站和SNMP代理。SNMP管理站是一个中心节点，负责收集维护各个SNMP元素的信息，并对这些信息进行处理，最后反馈给网络管理员；而SNMP代理是运行在各个被管理的网络节点上，负责统计该节点的各项信息，并且负责与SNMP管理站交互，接受并执行管理站的命令，上传各种本地的网络信息。</p><p>SNMP管理站和SNMP代理之间是松散耦合，它们之间的通信是通过UDP协议完成的。一般情况下，SNMP管理站通过UDP协议向SNMP代理发送各种命令，当SNMP代理收到命令后，返回SNMP管理站所需要的参数。但是当SNMP代理检测到网络元素异常的时候，也可以主动向SNMP管理站发送消息，通告当前异常状况。</p><p>SNMP的基本思想：为不同种类的设备、不同厂家生产的设备、不同型号的设备，定义为一个统一的接口和协议，使得管理员可以是使用统一的外观面对这些需要管理的网络设备进行管理。通过网络，管理员可以管理位于不同物理空间的设备，从而大大提高网络管理的效率，简化网络管理员的工作。</p><p>　　SNMP的工作方式：管理员需要向设备获取数据，所以SNMP提供了【读】操作；管理员需要向设备执行设置操作，所以SNMP提供了【写】操作；设备需要在重要状况改变的时候，向管理员通报事件的发生，所以SNMP提供了【Trap】操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nexus9K-commands-SNMP&quot;&gt;&lt;a href=&quot;#Nexus9K-commands-SNMP&quot; class=&quot;headerlink&quot; title=&quot;Nexus9K_commands_SNMP&quot;&gt;&lt;/a&gt;&lt;strong&gt;Nexus9K_command
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lvchongen.github.io/2019/03/20/%E4%BB%A3%E7%A0%81%E9%9D%99%E6%80%81%E6%A3%80%E6%9F%A5/"/>
    <id>https://lvchongen.github.io/2019/03/20/代码静态检查/</id>
    <published>2019-03-20T05:52:55.003Z</published>
    <updated>2019-03-20T05:53:12.288Z</updated>
    
    <content type="html"><![CDATA[<!doctype html><html><head><meta name="generator" content="Hexo 3.8.0"><meta charset="UTF-8"><meta name="viewport" content="width=device-width initial-scale=1"><title></title><link href="https://fonts.loli.net/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext" rel="stylesheet" type="text/css"><style type="text/css">html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; }html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; }iframe { margin: auto; }a.url { word-break: break-all; }a:active, a:hover { outline: 0px; }.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; word-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; }#write.first-line-indent p { text-indent: 2em; }#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }#write.first-line-indent li { margin-left: 2em; }.for-image #write { padding-left: 8px; padding-right: 8px; }body.typora-export { padding-left: 30px; padding-right: 30px; }.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }@media screen and (max-width: 500px) {  body.typora-export { padding-left: 0px; padding-right: 0px; }  #write { padding-left: 20px; padding-right: 20px; }  .CodeMirror-sizer { margin-left: 0px !important; }  .CodeMirror-gutters { display: none !important; }}#write li > figure:first-child { margin-top: -20px; }#write ol, #write ul { position: relative; }img { max-width: 100%; vertical-align: middle; }button, input, select, textarea { color: inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; }input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }*, ::after, ::before { box-sizing: border-box; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 2; }p { orphans: 4; }h1 { font-size: 2rem; }h2 { font-size: 1.8rem; }h3 { font-size: 1.6rem; }h4 { font-size: 1.4rem; }h5 { font-size: 1.2rem; }h6 { font-size: 1rem; }.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }.hidden { display: none; }.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }a { cursor: pointer; }sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }figure > table { margin: 0px !important; }tr { break-inside: avoid; break-after: auto; }thead { display: table-header-group; }table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }table.md-table td { min-width: 32px; }.CodeMirror-gutters { border-right: 0px; background-color: inherit; }.CodeMirror { text-align: left; }.CodeMirror-placeholder { opacity: 0.3; }.CodeMirror pre { padding: 0px 4px; }.CodeMirror-lines { padding: 0px; }div.hr:focus { cursor: none; }#write pre { white-space: pre-wrap; }#write.fences-no-line-wrapping pre { white-space: pre; }#write pre.ty-contain-cm { white-space: normal; }.CodeMirror-gutters { margin-right: 4px; }.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }#write .md-fences.mock-cm { white-space: pre-wrap; }.md-fences.md-fences-with-lineno { padding-left: 0px; }#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }.CodeMirror-line, twitterwidget { break-inside: avoid; }.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }.footnotes + .footnotes { margin-top: 0px; }.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }li div { padding-top: 0px; }blockquote { margin: 1rem 0px; }li .mathjax-block, li p { margin: 0.5rem 0px; }li { margin: 0px; position: relative; }blockquote > :last-child { margin-bottom: 0px; }blockquote > :first-child, li > :first-child { margin-top: 0px; }.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }#write .footnote-line { white-space: pre-wrap; }@media print {  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; }  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }  .typora-export * { -webkit-print-color-adjust: exact; }  html.blink-to-pdf { font-size: 13px; }  .typora-export #write { padding-left: 32px; padding-right: 32px; padding-bottom: 0px; break-after: avoid; }  .typora-export #write::after { height: 0px; }  @page { margin: 20mm 0px; }}.footnote-line { margin-top: 0.714em; font-size: 0.7em; }a img, img a { cursor: pointer; }pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }p > .md-image:only-child { display: inline-block; width: 100%; }#write .MathJax_Display { margin: 0.8em 0px 0px; }.md-math-block { width: 100%; }.md-math-block:not(:empty)::after { display: none; }[contenteditable="true"]:active, [contenteditable="true"]:focus { outline: 0px; box-shadow: none; }.md-task-list-item { position: relative; list-style-type: none; }.task-list-item.md-task-list-item { padding-left: 0px; }.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); }.math { font-size: 1rem; }.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }.md-toc-content { position: relative; margin-left: 0px; }.md-toc-content::after, .md-toc::after { display: none; }.md-toc-item { display: block; color: rgb(65, 131, 196); }.md-toc-item a { text-decoration: none; }.md-toc-inner:hover { text-decoration: underline; }.md-toc-inner { display: inline-block; cursor: pointer; }.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }.md-toc-h2 .md-toc-inner { margin-left: 2em; }.md-toc-h3 .md-toc-inner { margin-left: 4em; }.md-toc-h4 .md-toc-inner { margin-left: 6em; }.md-toc-h5 .md-toc-inner { margin-left: 8em; }.md-toc-h6 .md-toc-inner { margin-left: 10em; }@media screen and (max-width: 48em) {  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }  .md-toc-h4 .md-toc-inner { margin-left: 5em; }  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }  .md-toc-h6 .md-toc-inner { margin-left: 8em; }}a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }.footnote-line a:not(.reversefootnote) { color: inherit; }.md-attr { display: none; }.md-fn-count::after { content: "."; }code, pre, samp, tt { font-family: var(--monospace); }kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }code { text-align: left; vertical-align: initial; }a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }.md-inline-math .MathJax_SVG .noError { display: none !important; }.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }.MathJax_SVG * { transition: none; }.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; }.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }.md-diagram-panel > svg { max-width: 100%; }[lang="mermaid"] svg, [lang="flow"] svg { max-width: 100%; }[lang="mermaid"] .node text { font-size: 1rem; }table tr th { border-bottom: 0px; }video { max-width: 100%; display: block; margin: 0px auto; }iframe { max-width: 100%; width: 100%; border: none; }.highlight td, .highlight tr { border: 0px; }.CodeMirror { height: auto; }.CodeMirror.cm-s-inner { background: inherit; }.CodeMirror-scroll { overflow-y: hidden; overflow-x: auto; z-index: 3; }.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }.CodeMirror-gutters { border-right: 1px solid rgb(221, 221, 221); background: inherit; white-space: nowrap; }.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }.cm-s-inner .cm-number { color: rgb(17, 102, 68); }.cm-s-inner .cm-def { color: rgb(0, 0, 255); }.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }.cm-s-inner .cm-string { color: rgb(170, 17, 17); }.cm-s-inner .cm-property { color: rgb(0, 0, 0); }.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }.cm-negative { color: rgb(221, 68, 68); }.cm-positive { color: rgb(34, 153, 34); }.cm-header, .cm-strong { font-weight: 700; }.cm-del { text-decoration: line-through; }.cm-em { font-style: italic; }.cm-link { text-decoration: underline; }.cm-error { color: red; }.cm-invalidchar { color: red; }.cm-constant { color: rgb(38, 139, 210); }.cm-defined { color: rgb(181, 137, 0); }div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }.cm-s-inner .CodeMirror-activeline-background { background: inherit; }.CodeMirror { position: relative; overflow: hidden; }.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background: inherit; }.CodeMirror-sizer { position: relative; }.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; }.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: hidden; }.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 30px; z-index: 3; }.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; background: 0px 0px !important; border: none !important; }.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }.CodeMirror-lines { cursor: text; }.CodeMirror pre { border-radius: 0px; border-width: 0px; background: 0px 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; word-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; }.CodeMirror-wrap pre { word-wrap: break-word; white-space: pre-wrap; word-break: normal; }.CodeMirror-code pre { border-right: 30px solid transparent; width: fit-content; }.CodeMirror-wrap .CodeMirror-code pre { border-right: none; width: auto; }.CodeMirror-linebackground { position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; z-index: 0; }.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }.CodeMirror-measure pre { position: static; }.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right: none; width: 0px; }.CodeMirror div.CodeMirror-cursor { visibility: hidden; }.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }.cm-searching { background: rgba(255, 255, 0, 0.4); }@media print {  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }}:root { --side-bar-bg-color: #fafafa; --control-text-color: #777; }html { font-size: 16px; }body { font-family: "Open Sans", "Clear Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; color: rgb(51, 51, 51); line-height: 1.6; }#write { max-width: 860px; margin: 0px auto; padding: 30px 30px 100px; }#write > ul:first-child, #write > ol:first-child { margin-top: 30px; }a { color: rgb(65, 131, 196); }h1, h2, h3, h4, h5, h6 { position: relative; margin-top: 1rem; margin-bottom: 1rem; font-weight: bold; line-height: 1.4; cursor: text; }h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor { text-decoration: none; }h1 tt, h1 code { font-size: inherit; }h2 tt, h2 code { font-size: inherit; }h3 tt, h3 code { font-size: inherit; }h4 tt, h4 code { font-size: inherit; }h5 tt, h5 code { font-size: inherit; }h6 tt, h6 code { font-size: inherit; }h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom: 1px solid rgb(238, 238, 238); }h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom: 1px solid rgb(238, 238, 238); }h3 { font-size: 1.5em; line-height: 1.43; }h4 { font-size: 1.25em; }h5 { font-size: 1em; }h6 { font-size: 1em; color: rgb(119, 119, 119); }p, blockquote, ul, ol, dl, table { margin: 0.8em 0px; }li > ol, li > ul { margin: 0px; }hr { height: 2px; padding: 0px; margin: 16px 0px; background-color: rgb(231, 231, 231); border: 0px none; overflow: hidden; box-sizing: content-box; }li p.first { display: inline-block; }ul, ol { padding-left: 30px; }ul:first-child, ol:first-child { margin-top: 0px; }ul:last-child, ol:last-child { margin-bottom: 0px; }blockquote { border-left: 4px solid rgb(223, 226, 229); padding: 0px 15px; color: rgb(119, 119, 119); }blockquote blockquote { padding-right: 0px; }table { padding: 0px; word-break: initial; }table tr { border-top: 1px solid rgb(223, 226, 229); margin: 0px; padding: 0px; }table tr:nth-child(2n), thead { background-color: rgb(248, 248, 248); }table tr th { font-weight: bold; border-width: 1px 1px 0px; border-top-style: solid; border-right-style: solid; border-left-style: solid; border-top-color: rgb(223, 226, 229); border-right-color: rgb(223, 226, 229); border-left-color: rgb(223, 226, 229); border-image: initial; border-bottom-style: initial; border-bottom-color: initial; text-align: left; margin: 0px; padding: 6px 13px; }table tr td { border: 1px solid rgb(223, 226, 229); text-align: left; margin: 0px; padding: 6px 13px; }table tr th:first-child, table tr td:first-child { margin-top: 0px; }table tr th:last-child, table tr td:last-child { margin-bottom: 0px; }.CodeMirror-lines { padding-left: 4px; }.code-tooltip { box-shadow: rgba(0, 28, 36, 0.3) 0px 1px 1px 0px; border-top: 1px solid rgb(238, 242, 242); }.md-fences, code, tt { border: 1px solid rgb(231, 234, 237); background-color: rgb(248, 248, 248); border-radius: 3px; padding: 2px 4px 0px; font-size: 0.9em; }code { background-color: rgb(243, 244, 244); padding: 0px 2px; }.md-fences { margin-bottom: 15px; margin-top: 15px; padding-top: 8px; padding-bottom: 6px; }.md-task-list-item > input { margin-left: -1.3em; }@media print {  html { font-size: 13px; }  table, pre { break-inside: avoid; }  pre { word-wrap: break-word; }}.md-fences { background-color: rgb(248, 248, 248); }#write pre.md-meta-block { padding: 1rem; font-size: 85%; line-height: 1.45; background-color: rgb(247, 247, 247); border: 0px; border-radius: 3px; color: rgb(119, 119, 119); margin-top: 0px !important; }.mathjax-block > .code-tooltip { bottom: 0.375rem; }.md-mathjax-midline { background: rgb(250, 250, 250); }#write > h3.md-focus::before { left: -1.5625rem; top: 0.375rem; }#write > h4.md-focus::before { left: -1.5625rem; top: 0.285714rem; }#write > h5.md-focus::before { left: -1.5625rem; top: 0.285714rem; }#write > h6.md-focus::before { left: -1.5625rem; top: 0.285714rem; }.md-image > .md-meta { border-radius: 3px; padding: 2px 0px 0px 4px; font-size: 0.9em; color: inherit; }.md-tag { color: rgb(167, 167, 167); opacity: 1; }.md-toc { margin-top: 20px; padding-bottom: 20px; }.sidebar-tabs { border-bottom: none; }#typora-quick-open { border: 1px solid rgb(221, 221, 221); background-color: rgb(248, 248, 248); }#typora-quick-open-item { background-color: rgb(250, 250, 250); border-color: rgb(254, 254, 254) rgb(229, 229, 229) rgb(229, 229, 229) rgb(238, 238, 238); border-style: solid; border-width: 1px; }.on-focus-mode blockquote { border-left-color: rgba(85, 85, 85, 0.12); }header, .context-menu, .megamenu-content, footer { font-family: "Segoe UI", Arial, sans-serif; }.file-node-content:hover .file-node-icon, .file-node-content:hover .file-node-open-state { visibility: visible; }.mac-seamless-mode #typora-sidebar { background-color: var(--side-bar-bg-color); }.md-lang { color: rgb(180, 101, 77); }.html-for-mac .context-menu { --item-hover-bg-color: #E6F0FE; }#md-notification .btn { border: 0px; }.dropdown-menu .divider { border-color: rgb(229, 229, 229); } .typora-export li, .typora-export p, .typora-export,  .footnote-line {white-space: normal;} </style></head><body class="typora-export os-windows"><div id="write" class="is-node"><h1><a name="header-n0" class="md-header-anchor "></a>代码静态检查</h1><h2><a name="header-n3" class="md-header-anchor "></a><strong>什么是代码静态检查?</strong></h2><p>代码静态检查是指在不运行代码的方式下，通过词法分析、语法分析、控制流、数据流分析等技术对程序代码进行扫描，验证代码是否满足规范性、安全性、可靠性、可维护性等指标的一种代码分析技术。</p><p>在软件开发过程中，静态代码分析往往先于动态测试之前进行，同时也可以作为制定动态测试用例的参考。统计证明，在整个软件开发生命周期中，30% 至 70% 的代码逻辑设计和编码缺陷是可以通过静态代码分析来发现和修复的。</p><h2><a name="header-n7" class="md-header-anchor "></a><strong>什么是SonarQube?</strong></h2><p>能够实现代码静态检查的工具有很多，常见的如SonarQube，PMD，CheckStyle，以及集成在IDE中的各个插件，如Android Studio的Android Lint， 阿里的P3C插件(Eclipse, Idea)等。</p><p>其中SonarQube可以通过扩展插件的方式实现不同规则的汇总，以及提供直观的检查结果展示等功能，成为比较常见的静态检查工具，今天也重点介绍这个工具。</p><h3><a name="header-n10" class="md-header-anchor "></a><strong>SonarQube的基本原理</strong></h3><p>简单的介绍下SonarQube的基本工作原理：</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Sonar_Process.png" alt="Sonar_Process" referrerpolicy="no-referrer"></p><ol start><li>SonarScanner读取配置文件中的SonarQube地址，访问SonarQube获取默认规则或者和项目匹配的规则。</li><li>获取规则后的SonarScanner对源代码进行代码静态扫描</li><li>扫描完成后将静态检查的结果通过网络写入数据库中。</li><li>SonarQube读取数据库，按照一定的格式对数据进行筛选组合并展示给用户。</li><li>扫描的工具有很多，SonarScanner是其中一种，基于构建工具的如Maven，Gradle也是同样的原理。</li></ol><p><em>所以，SonarQube的安装和配置包含：扫描工具的选择和安装配置(基于项目的语言和构建方式选择)，数据库安装(选择Mysql)，SonarQube平台的配置</em></p><p>&nbsp;</p><h3><a name="header-n26" class="md-header-anchor "></a><strong>如何使用SonarQube？</strong></h3><ol start><li><p>扫描</p><pre spellcheck="false" class="md-fences md-end-block ty-contain-cm modeLoaded" lang><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">sonar-scanner.bat -Dsonar.projectKey="vxmgr_backend" -Dsonar.sources=./vxmgr</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 23px;"></div><div class="CodeMirror-gutters" style="display: none; height: 23px;"></div></div></div></pre></li><li><p>结果展示</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Sonar_Result.png" alt="Sonar_Result" referrerpolicy="no-referrer"></p></li></ol><h2><a name="header-n35" class="md-header-anchor "></a><strong>如何顺利的开展代码静态检查?</strong></h2><p>工具永远不是最重要的，重要的其实是流程的推进和方案的落地。想要顺利的开展代码静态检查，有如下几个<strong>Best Practices</strong>。</p><h4><a name="header-n37" class="md-header-anchor "></a>持续集成的方式进行代码静态检查：</h4><ol start><li><p>持续集成工具我们一般会选择Jenkins，不同项目会有不同的构建方式(如Maven，Ant，Gradle，xcodebuild等等)。而Fabric项目后端使用的是Python，所以我们可以直接通过命令行的方式进行调用。Jenkins中也有SonarQube的插件可供使用，但是通过Shell、脚本的方式执行任务更加灵活。</p></li><li><p>Fabric的项目使用Git进行代码管理，所以要在Jenkins中添加Git地址和对应的权限(用户名密码/公钥)。 公钥可以通过<code>ssh-keygen</code>生成，并在GitLab进行添加：</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/GitLab_token.png" alt="GitLab_token" referrerpolicy="no-referrer"></p></li><li><p>配置执行的频率，这个需要与开发团队进行沟通。一般来说可以周期固定时间检查或者提交代码进行检查。</p><ul><li>通过SCM配置固定的执行时间</li></ul><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Jenkins_SCM.png" alt="Jenkins_SCM" referrerpolicy="no-referrer"></p><ul><li>通过GitHook与GitLab交互，实现代码提交后自动触发静态检查。</li></ul><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/GitLab_hook.png" alt="GitLab_hook" referrerpolicy="no-referrer"></p></li></ol><h4><a name="header-n55" class="md-header-anchor "></a>GitHook的方式进行代码静态检查：</h4><p>GitHook可以分为Client端和Server端，一般常用的为Client端的pre-commit 和 Server端的 post-receive/pre-receive . </p><ul><li>post-receive: 在客户端推送完成后执行的脚本。</li><li>pre-receive: 在客户端推送时最先执行，可以用它来拒绝客户端的推送。</li><li>pre-commit :  在执行commit之前触发的脚本。</li></ul><p>了解了这几个脚本的执行顺序，结合Git Server的权限问题等，我们可以选择使用更加灵活的Client Side : pre-commit 来实现代码提交前的静态检查。保证提交的代码是没有Issue的。</p><p>下面是之前的pre-commit的demo，每次提交后对修改的java文件进行代码静态检查：</p><pre spellcheck="false" class="md-fences md-end-block ty-contain-cm modeLoaded" lang style="break-inside: unset;"><div class="CodeMirror cm-s-inner CodeMirror-wrap" lang><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 0px; left: 8px;"><textarea autocorrect="off" autocapitalize="off" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><span><span>​</span>x</span></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#!/usr/bin/python</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#coding=utf-8</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">import os</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">import commands</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">import sys</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#本机的环境变量放在~/.bash_profile中，所以每次运行需要执行source ~/.bash_profile。如果配置了全局变量，则不需要</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">(status_bin,output_bin) = commands.getstatusoutput('source /Users/lvchongen/.bash_profile')</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#获取当前的脚本路径</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">script_path = os.getcwd()</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#获取当前repo的路径</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">(status1,output1) = commands.getstatusoutput('cd ' + script_path)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">(status2,output2) = commands.getstatusoutput('cd ..')</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">(status3,output3) = commands.getstatusoutput('pwd')</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">repo_path = output3</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#设置代码静态检查的工作目录</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">lint_workspace = "/Users/lvchongen/Desktop/Lint"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#设置存储本次commit信息的文件</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">commitLog = lint_workspace + "/commit.log"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">reportPath = lint_workspace + "/report.html"</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#执行shell命令，将本次commit信息写入log中</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">(status, output) = commands.getstatusoutput('git diff --name-only HEAD^ &gt;' + commitLog)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#过滤文件非java文件</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">def getJavaFiles():</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>sourceFiles = []</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>commitFile = open(commitLog)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>lines = commitFile.readlines()</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>for line in lines:</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>result = line.find(".java")</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>if result != -1 :</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>fullPath = repo_path + "/" + line</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>sourceFiles.append(fullPath)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>return sourceFiles</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">#调用Android Lint执行代码静态检查(也可以安装findBugs,CheckStyle,PMD等工具进行代码检查)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">def analyzeFiles():</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>sourceFiles = getJavaFiles()</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>allFiles = ""</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>for item in sourceFiles:</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>allFiles = " " + allFiles.rstrip('\n') +" " + "".join(item)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>lintCommand = 'lint ' + allFiles.rstrip('\n') + ' --disable LintError --nowarn --html ' + reportPath</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>print lintCommand</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>(status_analyze, output_analyze) = commands.getstatusoutput(lintCommand)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>print output_analyze</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>result = output_analyze.find("0 errors")<span class="cm-tab" role="presentation" cm-text="">    </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span>if result == -1:</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>print "====="</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span><span class="cm-tab" role="presentation" cm-text="">    </span>sys.exit(1)</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" class="cm-tab-wrap-hack" style="padding-right: 0.1px;"><span class="cm-tab" role="presentation" cm-text="">    </span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"><span cm-text>​</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">analyzeFiles()</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom: 0px solid transparent; top: 1519px;"></div><div class="CodeMirror-gutters" style="display: none; height: 1519px;"></div></div></div></pre><p><span></span></p></div></body></html>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;&lt;meta name=&quot;generator&quot; content=&quot;Hexo 3.8.0&quot;&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;meta name=&quot;viewport&quot; content=&quot;width=device-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spine-Leaf 架构设计综述</title>
    <link href="https://lvchongen.github.io/2019/03/14/Spine-Leaf/"/>
    <id>https://lvchongen.github.io/2019/03/14/Spine-Leaf/</id>
    <published>2019-03-14T05:32:05.000Z</published>
    <updated>2019-03-14T08:33:33.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据中心网络：Spine-Leaf-架构设计综述"><a href="#数据中心网络：Spine-Leaf-架构设计综述" class="headerlink" title="数据中心网络：Spine-Leaf 架构设计综述"></a>数据中心网络：Spine-Leaf 架构设计综述</h1><h3 id="数据中心演进"><a href="#数据中心演进" class="headerlink" title="数据中心演进"></a>数据中心演进</h3><p>The architecture consists of core routers, aggregation routers (sometimes called distribution routers), and access switches. Between the aggregation routers and access switches, Spanning Tree Protocol is used to build a loopfree topology for the Layer 2 part of network. Spanning Tree Protocol provides several benefits: it is simple, and it is a plug-and-play technology requiring little configuration. VLANs are extended within each pod that servers can move freely within the pod without the need to change IP address and default gateway configurations. However, Spanning Tree Protocol cannot use parallel forwarding paths, and it always blocks redundant paths in a VLAN. </p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Old.png" alt="Old_DataCenter"></p><ul><li><strong>核心路由器(Core Routers)</strong>： 核心路由器又称”骨干路由器”，是位于网络中心的路由器。</li><li><strong>路由聚合(Aggregation Routers)</strong>： 路由汇聚的“含义”是把一组路由汇聚为一个单个的路由。路由汇聚的最终结果和最明显的好处是缩小网络上的路由表的尺寸。这样将减少与每一个路由跳有关的延迟，因为由于减少了路由登录项数量，查询路由表的平均时间将加快。路由汇聚的“用意”是当我们采用了一种体系化编址规划后的一种用一个IP地址代表一组IP地址的集合的方法。</li><li><strong>接入层交换机(Access Switches)</strong>: 通常将网络中直接面向用户连接或访问网络的部分称为接入层，将位于接入层和核心层之间的部分称为分布层或汇聚层。接入交换机一般用于直接连接电脑，汇聚交换机一般用于楼宇间。汇聚相当于一个局部或重要的中转站，核心相当于一个出口或总汇总。原来定义的汇聚层的目的是为了减少核心的负担，将本地数据交换机流量在本地的汇聚交换机上交换，减少核心层的工作负担，使核心层只处理到本地区域外的数据交换。</li><li><strong>生成树协议(Spanning Tree Protocol)</strong>: 一种工作在OSI网络模型中的第二层数据链路层的通信协议，基本应用是防止交换机冗余链路产生的环路.用于确保以太网中无环路的逻辑拓扑结构.从而避免了广播风暴,大量占用交换机的资源。</li><li><strong>VLAN</strong>: VLAN虚拟局域网是对连接到的第二层交换机端口的网络用户的逻辑分段，不受网络用户的物理位置限制而根据用户需求进行网络分段。一个VLAN可以在一个交换机或者跨交换机实现。VLAN可以根据网络用户的位置、作用、部门或者根据网络用户所使用的应用程序和协议来进行分组。基于交换机的虚拟局域网能够为局域网解决冲突域、广播域、带宽问题。</li></ul><p>In 2010, Cisco introduced virtual-port-channel (vPC) technology to overcome the limitations of Spanning Tree Protocol. vPC eliminates the spanning-tree blocked ports, provides active-active uplink from the access switches to the aggregation routers, and makes full use of the available bandwidth, as shown in Figure 2. With vPC technology, Spanning Tree Protocol is still used as a fail-safe mechanism. vPC technology works well in a relatively small data center environment in which most traffic consists of northbound and southbound communication between clients and servers.</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Second.png" alt="Second"></p><ul><li><strong>vPC</strong>: vPC 解放了被 STP 禁用的端口，提供接入交换机到汇聚路由器之间的 active-active 上行链路， 充分利用可用的带宽</li></ul><p>Since 2003, with the introduction of virtual technology, the computing, networking, and storage resources that were segregated in pods in Layer 2 in the three-tier data center design can be pooled. This revolutionary technology created a need for a larger Layer 2 domain, from the access layer to the core layer, as shown in Figure 3.</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Thired.png" alt="Third"></p><p>With virtualized servers, applications are increasingly deployed in a distributed fashion, which leads to increased east-west traffic. This traffic needs to be handled efficiently, with low and predictable latency. However, vPC can provide only two active parallel uplinks, and so bandwidth becomes a bottleneck in a three-tier data center architecture. Another challenge in a three-tier architecture is that server-to-server latency varies depending on the traffic path used. A new data center design called the Clos network–based spine-and-leaf architecture was developed to overcome these limitations. This architecture has been proven to deliver the high-bandwidth, low-latency, nonblocking serverto-server connectivity.</p><h3 id="Spine-and-Leaf-Architecture"><a href="#Spine-and-Leaf-Architecture" class="headerlink" title="Spine-and-Leaf Architecture"></a>Spine-and-Leaf Architecture</h3><p>In this two-tier Clos architecture, every lower-tier switch (leaf layer) is connected to each of the top-tier switches (spine layer) in a full-mesh topology. The leaf layer consists of access switches that connect to devices such as servers. The spine layer is the backbone of the network and is responsible for interconnecting all leaf switches. Every leaf switch connects to every spine switch in the fabric. The path is randomly chosen so that the traffic load is evenly distributed among the top-tier switches. If one of the top tier switches were to fail, it would only slightly degrade performance throughout the data center. If oversubscription of a link occurs (that is, if more traffic is generated than can be aggregated on the active link at one time), the process for expanding capacity is straightforward. An additional spine switch can be added, and uplinks can be extended to every leaf switch, resulting in the addition of interlayer bandwidth and reduction of the oversubscription. If device port capacity becomes a concern, a new leaf switch can be added by connecting it to every spine switch and adding the network configuration to the switch. The ease of expansion optimizes the IT department’s process of scaling the network. If no oversubscription occurs between the lower-tier switches and their uplinks, then a nonblocking architecture can be achieved. With a spine-and-leaf architecture, no matter which leaf switch to which a server is connected, its traffic always has to cross the same number of devices to get to another server (unless the other server is located on the same leaf). This approach keeps latency at a predictable level because a payload only has to hop to a spine switch and another leaf switch to reach its destination.</p><p><img src="https://lvchongen-1255888772.cos.ap-chengdu.myqcloud.com/Spine.png" alt="Spine-leaf"></p><p>在以上两级 Clos 架构中，<strong>每个低层级的交换机（leaf）都会连接到每个高层级的交换机 （spine），形成一个 full-mesh 拓扑</strong>。leaf 层由接入交换机组成，用于连接服务器等 设备。spine 层是网络的骨干（backbone），负责将所有的 leaf 连接起来。 fabric 中的每个 leaf 都会连接到每个 spine，如果一个 spine 挂了，数据中心的吞吐性 能只会有轻微的下降（slightly degrade）。</p><p>如果某个链路被打满了，扩容过程也很直接：添加一个 spine 交换机就可以扩展每个 leaf 的上行链路，增大了 leaf 和 spine 之间的带宽，缓解了链路被打爆的问题。如果接入层 的端口数量成为了瓶颈，那就直接添加一个新的 leaf，然后将其连接到每个 spine 并做相 应的配置即可。这种易于扩展（ease of expansion）的特性优化了 IT 部门扩展网络的过 程。<strong>leaf 层的接入端口和上行链路都没有瓶颈时，这个架构就实现了无阻塞</strong>（nonblocking）。</p><p><strong>在 Spine-and-Leaf 架构中，任意一个服务器到另一个服务器的连接，都会经过相同数量 的设备（除非这两个服务器在同一 leaf 下面），这保证了延迟是可预测的</strong>，因为一个包 只需要经过一个 spine 和另一个 leaf 就可以到达目的端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据中心网络：Spine-Leaf-架构设计综述&quot;&gt;&lt;a href=&quot;#数据中心网络：Spine-Leaf-架构设计综述&quot; class=&quot;headerlink&quot; title=&quot;数据中心网络：Spine-Leaf 架构设计综述&quot;&gt;&lt;/a&gt;数据中心网络：Spine-L
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lvchongen.github.io/2019/03/13/hello-world/"/>
    <id>https://lvchongen.github.io/2019/03/13/hello-world/</id>
    <published>2019-03-13T07:30:52.845Z</published>
    <updated>2019-03-13T07:30:52.845Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
